<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--spring的配置文件，主要配置与业务逻辑有关的-->

    <!--扫描除controller包的所有包-->
    <context:component-scan base-package="com.zm.demo">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- =====================================配置数据源=============================================-->
   <!--1.引入jdbc的配置文件-->
  <context:property-placeholder location="classpath:db.properties"/>
  <!--2.从配置文件中获取数据源信息.在此使用的是drud数据库连接池-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--driverClassName-->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <!--url-->
        <property name="url" value="${jdbc.url}" />
        <!--用户名-->
        <property name="username" value="${jdbc.username}"/>
        <!--密码-->
        <property name="password" value="${jdbc.password}"/>
        <!--初始化连接数量-->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!--最小空闲连接数-->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!--最大并发连接数-->
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!--最大等待时间-->
        <property name="maxWait" value="${jdbc.maxWait}"/>
    </bean>

    <!--=================================进行spring与mybatis的整合==================================================-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--装配数据源-->
        <property name="dataSource" ref="druidDataSource"/>
        <!--指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <!--指定mybatis的mapper文件位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>

        <!--<property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        &lt;!&ndash; config params as the following &ndash;&gt;
                        <value>
                            param1=value1
                        </value>
                    </property>
                </bean>
            </array>
        </property>-->

    </bean>

    <!--配置扫描器,将mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有的dao接口,将实现加入到ioc容器中-->
         <property name="basePackage" value="com.zm.demo.dao"/>
    </bean>

    <!--配置一个可以执行批量插入的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
         <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
         <constructor-arg name="executorType" value="BATCH" />
    </bean>

    <!--============================================事务控制的配置=========================================-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--需要控制管理的数据源-->
        <property name="dataSource" ref="druidDataSource"/>
    </bean>
   <!--
      开启事务:
        1.基于注解的事务控制(常用)
        2.基于xml配置文件的事务控制
   -->
  <aop:config>
      <!--切入点表达式-->
      <aop:pointcut id="txPoint" expression="execution(* com.zm.demo.service..*(..))" />
      <!--配置事务增强-->
      <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
  </aop:config>

    <!--配置事务如何增强和切入-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--* 表示所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--以get开始的所有方法-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

   <!-- spring配置文件的配置核心
    1.数据源
    2.与mybatis的整合
    3.事务控制-->
</beans>